{"version":3,"sources":["components/Contacts/Avatars.js","components/Contacts/ContactListItem.js","components/Contacts/AddContact.js","components/Contacts/FindContact.js","components/Contacts/ContactList.js"],"names":["avatarTop","avatarAccessories","avatarFacialHair","avatarMouth","avatarSkinColor","randomType","list","Math","floor","random","length","Avatars","style","width","height","avatarStyle","topType","accessoriesType","facialHairType","mouthType","skinColor","mapDispatchToProps","removeContact","connect","contact","Card","className","border","margin","flex","Body","Title","name","Text","number","Button","variant","type","id","onClick","e","target","addUserContact","useState","firstName","setFirstName","secondName","setSecondName","email","setEmail","setNumber","Container","Accordion","Header","Toggle","as","eventKey","Collapse","Row","Col","xs","lg","Form","Group","controlId","Label","Control","placeholder","value","onChange","replace","l","toUpperCase","getFilterValue","InputGroup","FormControl","aria-label","aria-describedby","getContacts","state","user","getUserInfo","contacts","getUserContacts","token","getUserToken","filter","getContactsFilter","useEffect","filteredContacts","toLowerCase","includes","filteredContact","CardDeck","map","key"],"mappings":"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","file":"static/js/10.38facb44.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Avatar from \"avataaars\";\r\n\r\nconst avatarTop = [\r\n  \"Eyepatch\",\r\n  \"Hat\",\r\n  \"Hijab\",\r\n  \"LongHairBigHair\",\r\n  \"LongHairBob\",\r\n  \"LongHairBun\",\r\n  \"LongHairCurly\",\r\n  \"LongHairCurvy\",\r\n  \"LongHairDreads\",\r\n  \"LongHairFrida\",\r\n  \"LongHairFro\",\r\n  \"LongHairFroBand\",\r\n  \"LongHairMiaWallace\",\r\n  \"LongHairNotTooLong\",\r\n  \"LongHairShavedSides\",\r\n  \"LongHairStraight\",\r\n  \"LongHairStraight2\",\r\n  \"LongHairStraightStrand\",\r\n  \"NoHair\",\r\n  \"ShortHairDreads01\",\r\n  \"ShortHairDreads02\",\r\n  \"ShortHairFrizzle\",\r\n  \"ShortHairShaggyMullet\",\r\n  \"ShortHairShortCurly\",\r\n  \"ShortHairShortFlat\",\r\n  \"ShortHairShortRound\",\r\n  \"ShortHairShortWaved\",\r\n  \"ShortHairSides\",\r\n  \"ShortHairTheCaesar\",\r\n  \"ShortHairTheCaesarSidePart\",\r\n  \"Turban\",\r\n  \"WinterHat1\",\r\n  \"WinterHat2\",\r\n  \"WinterHat3\",\r\n  \"WinterHat4\",\r\n];\r\nconst avatarAccessories = [\r\n  \"Blank\",\r\n  \"Kurt\",\r\n  \"Prescription01\",\r\n  \"Prescription02\",\r\n  \"Round\",\r\n  \"Sunglasses\",\r\n  \"Wayfarers\",\r\n];\r\nconst avatarFacialHair = [\r\n  \"BeardLight\",\r\n  \"BeardMajestic\",\r\n  \"BeardMedium\",\r\n  \"Blank\",\r\n  \"MoustacheFancy\",\r\n  \"MoustacheMagnum\",\r\n];\r\nconst avatarMouth = [\r\n  \"Concerned\",\r\n  \"Default\",\r\n  \"Disbelief\",\r\n  \"Eating\",\r\n  \"Grimace\",\r\n  \"Sad\",\r\n  \"ScreamOpen\",\r\n  \"Serious\",\r\n  \"Smile\",\r\n  \"Tongue\",\r\n  \"Twinkle\",\r\n  \"Vomit\",\r\n];\r\nconst avatarSkinColor = [\r\n  \"Tanned\",\r\n  \"Yellow\",\r\n  \"Pale\",\r\n  \"Light\",\r\n  \"Brown\",\r\n  \"DarkBrown\",\r\n  \"Black\",\r\n];\r\n\r\nconst randomType = function (list) {\r\n  return list[Math.floor(Math.random() * list.length)];\r\n};\r\n\r\nfunction Avatars() {\r\n  return (\r\n    <Avatar\r\n      style={{ width: \"100px\", height: \"100px\" }}\r\n      avatarStyle=\"Circle\"\r\n      topType={randomType(avatarTop)}\r\n      accessoriesType={randomType(avatarAccessories)}\r\n      facialHairType={randomType(avatarFacialHair)}\r\n      mouthType={randomType(avatarMouth)}\r\n      skinColor={randomType(avatarSkinColor)}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Avatars;\r\n","import React from \"react\";\r\nimport { Card, Button } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Avatars from \"./Avatars\";\r\nimport { connect } from \"react-redux\";\r\nimport { removeContact } from \"../../redux/contacts/contactsOperations\";\r\n\r\nfunction ContactListItem({ contact, removeContact }) {\r\n  return (\r\n    <Card\r\n      className=\"col mb-5\"\r\n      border=\"primary\"\r\n      style={{ width: \"18rem\", margin: \"10px\", flex: \"0 0 80%\" }}\r\n    >\r\n      <Avatars />\r\n      <Card.Body>\r\n        <Card.Title>{contact.name}</Card.Title>\r\n        <Card.Text>Email: test@email.com</Card.Text>\r\n        <Card.Text>Number: {contact.number}</Card.Text>\r\n        <Button\r\n          variant=\"primary\"\r\n          type=\"button\"\r\n          id={contact.id}\r\n          onClick={(e) => removeContact(e.target.id)}\r\n        >\r\n          Delete contact\r\n        </Button>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  removeContact,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactListItem);\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Form,\r\n  Button,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Accordion,\r\n  Card,\r\n} from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { addUserContact } from \"../../redux/contacts/contactsOperations\";\r\n\r\nfunction AddContact({ addUserContact }) {\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [secondName, setSecondName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  const firstNameChange = (e) => setFirstName(e.target.value);\r\n  const secondNameChange = (e) => setSecondName(e.target.value);\r\n  const emailChange = (e) => setEmail(e.target.value);\r\n  const numberChange = (e) => setNumber(e.target.value);\r\n\r\n  const handleSubmit = () => {\r\n    const fullName = `${firstName} ${secondName}`;\r\n    const contact = {\r\n      name: fullName.replace(/\\b\\w/g, (l) => l.toUpperCase()),\r\n      number: number,\r\n    };\r\n    addUserContact(contact);\r\n    setFirstName(\"\");\r\n    setSecondName(\"\");\r\n    setEmail(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Accordion>\r\n        <Card.Header>\r\n          <Accordion.Toggle\r\n            as={Button}\r\n            variant=\"button\"\r\n            eventKey=\"0\"\r\n            className=\"btn btn-primary\"\r\n          >\r\n            Add contacts\r\n          </Accordion.Toggle>\r\n        </Card.Header>\r\n        <Accordion.Collapse eventKey=\"0\">\r\n          <Card.Header>\r\n            <Row className=\"justify-content-md-center\">\r\n              <Col xs lg=\"5\">\r\n                <h2 className=\"row row-cols-md-5 justify-content-center\">\r\n                  Add contacts\r\n                </h2>\r\n                <Form>\r\n                  <Form.Row>\r\n                    <Form.Group as={Col} controlId=\"FirstName\">\r\n                      <Form.Label>First Name</Form.Label>\r\n                      <Form.Control\r\n                        type=\"name\"\r\n                        placeholder=\"First Name\"\r\n                        name=\"firstName\"\r\n                        value={firstName}\r\n                        onChange={firstNameChange}\r\n                      />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} controlId=\"SecondName\">\r\n                      <Form.Label>Second Name</Form.Label>\r\n                      <Form.Control\r\n                        type=\"name\"\r\n                        placeholder=\"Second Name\"\r\n                        name=\"secondName\"\r\n                        value={secondName}\r\n                        onChange={secondNameChange}\r\n                      />\r\n                    </Form.Group>\r\n                  </Form.Row>\r\n                  <Form.Row>\r\n                    <Form.Group as={Col} controlId=\"formGridEmail\">\r\n                      <Form.Label>Email</Form.Label>\r\n                      <Form.Control\r\n                        type=\"email\"\r\n                        placeholder=\"Enter email\"\r\n                        name=\"email\"\r\n                        value={email}\r\n                        onChange={emailChange}\r\n                      />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} controlId=\"formGridNumber\">\r\n                      <Form.Label>Number</Form.Label>\r\n                      <Form.Control\r\n                        type=\"Number\"\r\n                        placeholder=\"Number\"\r\n                        name=\"number\"\r\n                        value={number}\r\n                        onChange={numberChange}\r\n                      />\r\n                    </Form.Group>\r\n                  </Form.Row>\r\n                  <Button\r\n                    variant=\"primary\"\r\n                    type=\"button\"\r\n                    onClick={handleSubmit}\r\n                  >\r\n                    Add contacts\r\n                  </Button>\r\n                </Form>\r\n              </Col>\r\n            </Row>\r\n          </Card.Header>\r\n        </Accordion.Collapse>\r\n      </Accordion>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  addUserContact,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(AddContact);\r\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Accordion,\r\n  Card,\r\n  InputGroup,\r\n  FormControl,\r\n} from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { getFilterValue } from \"../../redux/contacts/contactsActions\";\r\n\r\nfunction FindContact({ getFilterValue }) {\r\n  return (\r\n    <Container>\r\n      <Accordion>\r\n        <Card.Header>\r\n          <Accordion.Toggle\r\n            as={Button}\r\n            variant=\"button\"\r\n            eventKey=\"0\"\r\n            className=\"btn btn-primary\"\r\n          >\r\n            Find contacts\r\n          </Accordion.Toggle>\r\n        </Card.Header>\r\n        <Accordion.Collapse eventKey=\"0\">\r\n          <Card.Header>\r\n            <Row className=\"justify-content-md-center\">\r\n              <Col xs lg=\"5\">\r\n                <h2 className=\"row row-cols-md-5 justify-content-center\">\r\n                  Find contacts\r\n                </h2>\r\n                <InputGroup className=\"mb-3\">\r\n                  <FormControl\r\n                    placeholder=\"Start enter username\"\r\n                    aria-label=\"Start enter username\"\r\n                    aria-describedby=\"basic-addon2\"\r\n                    onChange={(e) => getFilterValue(e.target.value)}\r\n                  />\r\n                </InputGroup>\r\n              </Col>\r\n            </Row>\r\n          </Card.Header>\r\n        </Accordion.Collapse>\r\n      </Accordion>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  getFilterValue,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(FindContact);\r\n","import React, { useEffect } from \"react\";\r\nimport { CardDeck } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport ContactListItem from \"./ContactListItem\";\r\nimport AddContact from \"./AddContact\";\r\nimport FindContact from \"./FindContact\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getUserContacts,\r\n  getUserToken,\r\n  getContactsFilter,\r\n  getUserInfo,\r\n} from \"../../redux/contacts/contactsSelectors\";\r\nimport { getContacts } from \"../../redux/contacts/contactsOperations\";\r\n\r\nconst filteredContact = (contacts, filter) => {\r\n  if (filter.length !== 0) {\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase())\r\n    );\r\n  } else {\r\n    return contacts;\r\n  }\r\n};\r\n\r\nfunction ContactList({ getContacts, token, contacts, filter }) {\r\n  useEffect(() => {\r\n    getContacts(token);\r\n  }, [getContacts, token]);\r\n\r\n  const filteredContacts = filteredContact(contacts, filter);\r\n\r\n  return (\r\n    <>\r\n      <br />\r\n      <AddContact />\r\n      <FindContact />\r\n      <br />\r\n      <h2 className=\"row row-cols-5 justify-content-center\">Contacts list</h2>\r\n      {filteredContacts.length !== 0 && (\r\n        <CardDeck className=\"row row-cols-md-5 justify-content-center\">\r\n          {filteredContacts.map((contact) => (\r\n            <ContactListItem contact={contact} key={contact.id} />\r\n          ))}\r\n        </CardDeck>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user: getUserInfo(state),\r\n    contacts: getUserContacts(state),\r\n    token: getUserToken(state),\r\n    filter: getContactsFilter(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  getContacts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n"],"sourceRoot":""}